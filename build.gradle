buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.5.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply plugin: 'jetty'

jar {
    baseName = 'familyTasks'
    version =  '0.1.0'
}

repositories {
    mavenCentral()
}

jettyRun{
	contextPath = "spring4"
	httpPort = 8080
}

jettyRunWar{
	contextPath = "spring4"
	httpPort = 8080
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
	compile 'ch.qos.logback:logback-classic:1.1.3'
	
	compile 'org.springframework:spring-context:4.1.6.RELEASE'
	
	compile 'org.springframework:spring-webmvc:4.1.6.RELEASE'
	
    compile 'org.hibernate:hibernate-core:4.3.6.Final'
    compile 'org.hibernate:hibernate-entitymanager:4.3.6.Final'

    compile 'commons-dbcp:commons-dbcp:1.4'   
    compile 'commons-fileupload:commons-fileupload:1.2.2'
    compile 'commons-io:commons-io:1.3.2'

	compile 'org.springframework:spring-orm:4.1.6.RELEASE'

	compile 'org.aspectj:aspectjrt:1.7.4'

	compile 'javax.inject:javax.inject:1'

	compile 'javax.servlet:servlet-api:2.5'			
	compile 'javax.servlet:jsp-api:2.0'	
	compile 'javax.servlet:jstl:1.2'			

	compile 'org.springframework:spring-tx:4.1.6.RELEASE'

    compile 'mysql:mysql-connector-java:5.1.31'
    testCompile("junit:junit:4.11")
    testCompile('org.mockito:mockito-all:1.9.5')
    testCompile('org.springframework:spring-test:4.1.6.RELEASE')
    testCompile('org.hamcrest:hamcrest-core:1.3')
    testCompile('org.hamcrest:hamcrest-library:1.3')
}

// add a new unitTest sourceSet
sourceSets {
    test {
    	java {
        	//srcDirs = ["tests/controller"]
        	//resources.srcDir file('src/test/resources')
    	}
    }
}

test {

  // set a system property for the test JVM(s)
  //systemProperty 'some.prop', 'value'

  // explicitly include or exclude tests
  include 'src/tests/controller/**'
  //exclude 'org/boo/**'

  // show standard out and standard error of the test JVM(s) on the console
  testLogging.showStandardStreams = true

  // set heap size for the test JVM(s)
  minHeapSize = "128m"
  maxHeapSize = "512m"

  // set JVM arguments for the test JVM(s)
  jvmArgs '-XX:MaxPermSize=256m'

  // listen to events in the test execution lifecycle
  beforeTest { descriptor ->
     logger.lifecycle("Running test: " + descriptor)
  }

  // listen to standard out and standard error of the test JVM(s)
  onOutput { descriptor, event ->
     logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
  }
}

task publishDb(type: Exec) << {
    commandLine './setupDb fadeout79 30i07r79l' 
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}